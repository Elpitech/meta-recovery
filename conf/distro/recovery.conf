DISTRO = "recovery"
DISTRO_NAME = "Baikal-T Recovery Firmware (T-platforms Reference Distro)"
DISTRO_VERSION = "${TPSDK_VERSION}.${TPSDK_REVISION}${@'-rc${TPSDK_RCCYCLE}' if '${TPSDK_RCCYCLE}' else ''}"
DISTRO_CODENAME = "${LAYERSERIES_CORENAMES}"
MAINTAINER = "Sergey Semin <fancer.lancer@gmail.com>"

#
# T-platforms SDK/recovery firmware configurations
#
# Include SDK configurations declared in the Baikal-T distro-specific header
# file. It shall define all the necessary global variables used by the T-platforms
# specific SDK. Additionaly the firmware include file shall help to configure
# the recovery image settings.
#
require conf/distro/include/tpsdk-config.inc
require conf/distro/include/firmware.inc
include conf/distro/${MACHINE}.conf

# This is the target device vendor, and it can be changed within the recipes,
# so don't use it for any constant paths.
TARGET_VENDOR = "-${SOC_FAMILY}"

# We don't use kernel-yocto class since it's overwhelmed with kmeta functions,
# which we really don't need. Additionally we add fitImage class to be part of
# this image, so to use it in recovery-image creation procedure.
KERNEL_CLASSES = " kernel-fitimage "
# We need to have fit image for U-boot recovery firmware
KERNEL_EXTRA_IMAGETYPES ?= ""
KERNEL_IMAGETYPE = ""
KERNEL_IMAGETYPES = "fitImage ${KERNEL_EXTRA_IMAGETYPES}"
# U-boot load addresses are used by the FIT and U-images creators to make
# properly boot the kernel
UBOOT_LOADADDRESS = "${UBOOT_VMLINUZ_LOADADDRESS}"
UBOOT_ENTRYPOINT = "${UBOOT_VMLINUZ_LOADADDRESS}"
UBOOT_ENTRYSYMBOL = ""

# We shall create the cpio.gz initramfs image with distro name as the image suffix
INITRAMFS_EXTRA_FSTYPES ?= ""
INITRAMFS_IMAGE = "baikal-image-recovery"
INITRAMFS_FSTYPES = "cpio.gz ${INITRAMFS_EXTRA_FSTYPES}"

# Setup the U-boot signature keys source directory and keys name. Additionally
# lets copy the u-boot.dtb file to the build directory.
UBOOT_SIGN_KEYDIR = "${TPSDK_KEYS_DIR}"
UBOOT_SIGN_KEYNAME = "${TPSDK_KEYS_NAME}"
UBOOT_MAKE_TARGET = "all u-boot.dtb"

# Baikal-T ROM-image base and symlink names globally declared so other recipes
# like recovery-image-info app could use them.
ROM_BASE_NAME = "recovery-${MACHINE}-${DATETIME}"
ROM_SYMLINK_NAME = "recovery-${MACHINE}"
IMAGE_INFO_BASE_NAME = "image-info-${MACHINE}-${DATETIME}"
IMAGE_INFO_SYMLINK_NAME = "image-info-${MACHINE}"

TCLIBCAPPEND = ""

QEMU_TARGETS ?= "mips mipsel mips64 mips64el"

PREMIRRORS ??= "\
bzr://.*/.*   http://downloads.yoctoproject.org/mirror/sources/ \n \
cvs://.*/.*   http://downloads.yoctoproject.org/mirror/sources/ \n \
git://.*/.*   http://downloads.yoctoproject.org/mirror/sources/ \n \
gitsm://.*/.* http://downloads.yoctoproject.org/mirror/sources/ \n \
hg://.*/.*    http://downloads.yoctoproject.org/mirror/sources/ \n \
osc://.*/.*   http://downloads.yoctoproject.org/mirror/sources/ \n \
p4://.*/.*    http://downloads.yoctoproject.org/mirror/sources/ \n \
svn://.*/.*   http://downloads.yoctoproject.org/mirror/sources/ \n"

MIRRORS =+ "\
ftp://.*/.*      http://downloads.yoctoproject.org/mirror/sources/ \n \
http://.*/.*     http://downloads.yoctoproject.org/mirror/sources/ \n \
https://.*/.*    http://downloads.yoctoproject.org/mirror/sources/ \n"

# The CONNECTIVITY_CHECK_URI's are used to test whether we can succesfully
# fetch from the network (and warn you if not). To disable the test set
# the variable to be empty.
# Git example url: git://git.yoctoproject.org/yocto-firewall-test;protocol=git;rev=master
CONNECTIVITY_CHECK_URIS ?= "https://www.example.com/"

SANITY_TESTED_DISTROS ?= " \
            ubuntu-15.04 \n \
            ubuntu-16.04 \n \
            ubuntu-16.10 \n \
            ubuntu-17.04 \n \
            debian-8 \n \
            debian-9 \n \
            opensuse-42.1 \n \
            opensuse-42.2 \n \
            "

# QA check settings - a little stricter than the OE-Core defaults
WARN_TO_ERROR_QA = "already-stripped compile-host-path install-host-path \
                    installed-vs-shipped ldflags pn-overrides rpaths staticdev \
                    useless-rpaths"
WARN_QA_remove = "${WARN_TO_ERROR_QA}"
ERROR_QA_append = " ${WARN_TO_ERROR_QA}"

require conf/distro/include/no-static-libs.inc

# Use pre-built libc library so speed the process up
require conf/distro/include/yocto-uninative.inc
INHERIT += "uninative"
